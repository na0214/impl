{"version":3,"sources":["App.tsx","components/Header.tsx","components/TextEdit.tsx","components/KrivineMachine/KrivineMachine.tsx","serviceWorker.ts","index.tsx"],"names":["Mode","Header","props","AppBar","position","Toolbar","Typography","variant","style","marginLeft","mode","TextEdit","TextField","id","label","multiline","fullWidth","buttonStyle","height","fontSize","KrivineMachine","Grid","container","item","xs","display","gridTemplateRows","gridTemplateColumns","Button","color","initialMode","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iKAKKA,E,wECEQC,EAAgC,SAACC,GAAD,OAC3C,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,mBAGA,yBAAKC,MAAO,CAAEC,WAAY,SACxB,kBAACH,EAAA,EAAD,CAAYC,QAAQ,MACjBL,EAAMQ,U,wBCZJC,EAAqB,kBAChC,kBAACC,EAAA,EAAD,CACEC,GAAG,4BACHC,MAAM,0BACNC,WAAS,EACTC,WAAS,EACTT,QAAQ,YCJNU,EAAc,CAClBC,OAAQ,OACRC,SAAU,QAGCC,EAA2B,WACtC,OACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAG,kBAAC,EAAD,OAClB,kBAACH,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,yBAAKhB,MAAO,CAAEiB,QAAS,OAAQC,iBAAkB,UAAWC,oBAAqB,QAC/E,oCACA,kBAACN,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAG,kBAACI,EAAA,EAAD,CAAQpB,MAAOS,EAAaY,MAAM,YAAYb,WAAS,EAACT,QAAQ,aAAhE,IAA8E,KAA9E,MAClB,kBAACc,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAG,kBAACI,EAAA,EAAD,CAAQpB,MAAOS,EAAaY,MAAM,YAAYb,WAAS,EAACT,QAAQ,aAAhE,IAA8E,IAA9E,MAClB,kBAACc,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAG,kBAACI,EAAA,EAAD,CAAQpB,MAAOS,EAAaY,MAAM,UAAUb,WAAS,EAACT,QAAQ,aAA9D,IAA4E,IAA5E,MAClB,kBAACc,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAG,kBAACI,EAAA,EAAD,CAAQpB,MAAOS,EAAaY,MAAM,UAAUb,WAAS,EAACT,QAAQ,aAA9D,IAA4E,KAA5E,Y,SHhBzBP,K,kCAAAA,M,KAIL,IAAM8B,EAAoB9B,EAAKoB,eAahBW,EAXO,WAAO,IAAD,EACFC,mBAASF,GADP,mBACnBpB,EADmB,UAG1B,OACE,oCACE,kBAAC,EAAD,CAAQA,KAAMA,IACd,kBAAC,EAAD,QILcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.720f1570.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Header } from './components/Header'\n\nimport { KrivineMachine } from './components/KrivineMachine/KrivineMachine'\n\nenum Mode {\n  KrivineMachine = \"Krivine Machine\",\n}\n\nconst initialMode: Mode = Mode.KrivineMachine\n\nconst App: React.FC = () => {\n  const [mode, setMode] = useState(initialMode)\n\n  return (\n    <>\n      <Header mode={mode} />\n      <KrivineMachine />\n    </>\n  )\n}\n\nexport default App;\n","import React from 'react'\nimport { AppBar, Typography, Toolbar } from '@material-ui/core'\n\ntype HeaderProps = {\n  mode: string\n}\n\nexport const Header: React.FC<HeaderProps> = (props) => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h5\">\n        Implementations\n      </Typography>\n      <div style={{ marginLeft: \"auto\" }}>\n        <Typography variant=\"h6\">\n          {props.mode}\n        </Typography>\n      </div>\n    </Toolbar>\n  </AppBar>\n)\n\n","import React from 'react'\nimport { TextField, Typography, Paper, Grid } from '@material-ui/core'\n\nexport const TextEdit: React.FC = () => (\n  <TextField\n    id=\"outlined-multiline-static\"\n    label=\"Please input code here.\"\n    multiline\n    fullWidth\n    variant=\"filled\"\n  />\n)","import React from 'react'\nimport { Grid, Button } from '@material-ui/core'\nimport { TextEdit } from '../TextEdit'\nimport { MachineState } from './MachineState'\n\nconst buttonStyle = {\n  height: \"100%\",\n  fontSize: \"30px\"\n}\n\nexport const KrivineMachine: React.FC = () => {\n  return (\n    <Grid container>\n      <Grid item xs={6}><TextEdit /></Grid>\n      <Grid item xs={6}>\n        <div style={{ display: \"grid\", gridTemplateRows: \"9fr 1fr\", gridTemplateColumns: \"1fr\" }}>\n          <h1>Test</h1>\n          <Grid container>\n            <Grid item xs={3}><Button style={buttonStyle} color=\"secondary\" fullWidth variant=\"contained\"> {\"<<\"} </Button></Grid>\n            <Grid item xs={3}><Button style={buttonStyle} color=\"secondary\" fullWidth variant=\"contained\"> {\"<\"} </Button></Grid>\n            <Grid item xs={3}><Button style={buttonStyle} color=\"primary\" fullWidth variant=\"contained\"> {\">\"} </Button></Grid>\n            <Grid item xs={3}><Button style={buttonStyle} color=\"primary\" fullWidth variant=\"contained\"> {\">>\"} </Button></Grid>\n          </Grid>\n        </div>\n      </Grid>\n    </Grid>)\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}